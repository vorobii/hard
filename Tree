class Node:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None


class Tree:
    def __init__(self):
        self.root = None

    def add(self, data):
        def _add(curr, data):
            if data > curr.data:
                if curr.right is None:
                    curr.right = Node(data)
                else:
                    _add(curr.right, data)
            elif data < curr.data:

                if curr.left is None:
                    curr.left = Node(data)

                else:
                    _add(curr.left, data)

        if self.root is None:
            self.root = Node(data)

        else:
            _add(self.root, data)

    def dfs_in_order(self):

        def _dfs_in_order(curr):
            if curr is None:
                return

            _dfs_in_order(curr.left)
            print(curr.data, end=" ")
            _dfs_in_order(curr.right)

        if self.root is None:
            print('Tree is empty')
        else:
            _dfs_in_order(self.root)

    def dfs_pre_order(self):
        def _dfs_pre_order( curr):
            if curr is None:
                return

            print(curr.data, end=" ")
            _dfs_pre_order(curr.left)
            _dfs_pre_order(curr.right)

        if self.root is None:
            print('Tree is empty')
        else:
            _dfs_pre_order(self.root)

    def dfs_post_order(self):
        def _dfs_post_order( curr):
            if curr is None:
                return
            _dfs_post_order(curr.left)
            _dfs_post_order(curr.right)
            print(curr.data, end=" ")

        if self.root is None:
            print('Tree is empty')
        else:
            _dfs_post_order(self.root)

    def find_in_tree(self, data):
        def _find_in_tree( curr, values):
            if curr is None:
                return

            _find_in_tree(curr.left, values)
            values.append(curr.data)
            _find_in_tree(curr.right, values)

        values = []
        if self.root is None:
            print(data + ' Not in Tree')

        else:
            _find_in_tree(self.root, values)

            if data in values:
                print('Є такий елемент')
            else:
                print('Немає такого елементу')

    def bfs(self):
        queue = [self.root]
        while queue:
            curr = queue[0]
            if curr.left is not None:
                 queue.append(curr.left)
            if curr.right is not None:
                 queue.append(curr.right)
            print(curr.data, end=" ")

            queue.pop(0)

    def tree_to_list(self):
        def _tree_to_list( curr, list_v):
            if curr is None:
                return
            _tree_to_list(curr.left, list_v)
            list_v.append(curr.data)
            _tree_to_list(curr.right, list_v)
        res = []
        if self.root is None:
            return res
        else:
            _tree_to_list(self.root, res)
            return res


test = Tree()
test.add(4)
test.add(5)
test.add(2)
test.add(7)
test.add(3)

print('DFS in order\t', end=" ")
test.dfs_in_order()
print('\nDFS pre order\t', end=" ")
test.dfs_pre_order()
print('\nDFS post order\t', end=" ")
test.dfs_post_order()
print('\nПошук елемента :', end="  ")
test.find_in_tree(100)
print('BFS :', end=" ")
test.bfs()
test.tree_to_list()
